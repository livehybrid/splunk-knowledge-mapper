[knowledge_graph_join]
definition = inputlookup relationships_lookup | lookup entities_lookup id AS source OUTPUT label as source_name, type as source_type, details as source_description | lookup entities_lookup id AS target OUTPUT label as target_name, type as target_type, details as target_description | eval isAnomaly=if(label=="failed_login", "true", "false")
iseval = 0

[get_unique_entities]
definition = inputlookup entities_lookup | rename id as entityId, label as name, type as entityType, details as description | table entityId, name, entityType, description
iseval = 0

[get_relationships_for_nodes(1)]
args = node_filter
definition = `knowledge_graph_join` | search $node_filter$
iseval = 0

# --- Example: Live Data Macro for CIM Authentication Data ---
# To use this, rename it to `get_knowledge_graph` and update the main macro's name to something else (e.g., `get_knowledge_graph_sample`).
# [get_knowledge_graph_cim_auth(1)]
# args = filter
# definition = | tstats `summariesonly` values(Authentication.src) as src, values(Authentication.user) as user, values(Authentication.action) as action from datamodel=Authentication by Authentication.dest | rename Authentication.* as * | where isnotnull(user) AND isnotnull(dest) AND (isnull($filter$) OR (match(user, ".*$filter$*") OR match(dest, ".*$filter$*"))) | mvexpand user | mvexpand dest | eval source = user, target = dest, label = action, id = source."-".target."-".label, source_type="user", target_type="host", source_label = source, target_label = target, details = "{}", source_details = "{}", target_details = "{}" | eval isAnomaly = if(action="failure", "true", "false") | table id, source, target, label, isAnomaly, details, source_type, source_label, source_details, target_type, target_label, target_details
# iseval = 0

# --- Example: MLTK Anomaly Detection Macro ---
# This builds on the CIM macro above, adding MLTK's DensityFunction to flag rare relationships as anomalous.
# [get_knowledge_graph_with_mltk(1)]
# args = filter
# definition = | tstats `summariesonly` values(Authentication.src) as src, values(Authentication.user) as user, values(Authentication.action) as action from datamodel=Authentication by Authentication.dest | rename Authentication.* as * | where isnotnull(user) AND isnotnull(dest) AND (isnull($filter$) OR (match(user, ".*$filter$*") OR match(dest, ".*$filter$*"))) | mvexpand user | mvexpand dest | eval source = user, target = dest, label = action | fit DensityFunction into app:knowledge-mapper_anomalies by "source", "target", "label" | apply app:knowledge-mapper_anomalies | eval isAnomaly=if(density<0.01, "true", "false") | eval id = source."-".target."-".label, source_type="user", target_type="host", source_label = source, target_label = target, details = "{}", source_details = "{}", target_details = "{}" | table id, source, target, label, isAnomaly, details, source_type, source_label, source_details, target_type, target_label, target_details
# iseval = 0 